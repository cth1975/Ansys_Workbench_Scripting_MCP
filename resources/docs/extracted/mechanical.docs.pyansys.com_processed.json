{
  "source_directory": "mechanical.docs.pyansys.com",
  "processed_date": "2025-09-14T15:52:48.433847",
  "total_files": 133,
  "processed_files": 10,
  "content": [
    {
      "file": "version/stable/index.html",
      "title": "PyMechanical \u2014 PyMechanical",
      "content": "PyMechanical \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nPyMechanical cheat sheet\nPyMechanical Version 0.11\nGlobals parameter in the embedded app\nLaunch GUI\nAutocomplete settings command\nVisualize geometry in 3D\nPrint the Mechanical project tree\nPyAnsys\nPython API to interact with Ansys Mechanical (FEA software for structural engineering) from 2024R1 and later versions.\nGetting started\nLearn how to install and use PyMechanical. Explains architecture\nand background.\nInstall Architecture Docker\nGetting started\nExamples\nDive into examples created using PyMechanical.\nBasic Technology-showcase Tips\nExamples\nAPI reference\nUnderstand PyMechanical API endpoints and their capabilities\nClasses Methods Error handling\nAPI reference\nEmbedding instance\nA Mechanical object implemented in .NET is directly loaded into Python memory.\nPython.NET no-GUI\nEmbedded instance\nRemote session\nUsing gRPC, Mechanical operates as a server, ready to respond to client requests.\ngRPC GUI\nRemote session\nMechanical scripting\nOverview of Ansys Mechanical scripting.\nACT Threading Script helpers\nMechanical scripting\nFAQs\nFrequently asked questions and their answers.\nHow Why What\nFrequently asked questions\nKnown issues and limitations\nIssues and limitations on both PyMechanical and Mechanical.\n24R1 24R2 25R1 25R2\nKnown issues and limitations\nContribute\nLearn how to contribute to the PyMechanical codebase\nor documentation.\nTest Documentation Issues\nContribute\nEdit\non GitHub\n\u00a9 Copyright (c) 2025 ANSYS, Inc. All rights reserved.\nCreated using Sphinx 8.2.3.\nBuilt with the\nAnsys ",
      "length": 2035
    },
    {
      "file": "version/stable/changelog.html",
      "title": "Release notes \u2014 PyMechanical",
      "content": "Release notes \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nPyMechanical Version 0.11\nGlobals parameter in the embedded app\nLaunch GUI\nAutocomplete settings command\nVisualize geometry in 3D\nPrint the Mechanical project tree\nPyAnsys\nRelease notes\nRelease notes#\nThis document contains the release notes for the project.\nVersion 0.11#\nWhat's New#\nGlobals parameter in the embedded app\nAvailable in v0.11.14 and later\nThe globals parameter of the App class is used to update the global variables. This parameter is optional and interchangeable with app.update_globals(globals()). To exclude enums from the global variables, use app.update_globals(globals(), False). See the globals page for more information.\nUsing the globals parameter:\nfrom ansys.mechanical.core import App\n# Initialize the app and update globals\napp = App(globals=globals())\nUsing the update_globals method:\nfrom ansys.mechanical.core import App\n# Initialize the app and update globals\napp = App()\napp.update_globals(globals())\nUsing the update_globals method excluding enums from global variables:\nfrom ansys.mechanical.core import App\n# Initialize the app and update globals\napp = App()\napp.update_globals(globals(), False)\nLaunch GUI\nAvailable in v0.11.8 and later\nThe launch_gui() function graphically launches the current state of the embedded instance when the App has been saved.\nThe launch_gui() function saves the active .mechdb file and creates a copy of the existing .mechdb file with a temporary name. The temporary .mechdb file is used to launch the GUI. By default, the temporary .me",
      "length": 38659
    },
    {
      "file": "version/stable/architecture.html",
      "title": "PyMechanical architecture \u2014 PyMechanical",
      "content": "PyMechanical architecture \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nSection Navigation\nInstallation guide\nLaunching PyMechanical\nUsing Mechanical through Docker\nWindows Subsystem for Linux (WSL)\nPyMechanical architecture\nPyAnsys\nGetting started\nPyMechanical architecture\nPyMechanical architecture#\nPyMechanical provides a Python interface to Ansys Mechanical. Mechanical is a\npolyglot [1] desktop app whose graphical user interface (GUI) runs on either\nthe Windows or Linux operating system. Mechanical\u2019s APIs are implemented in C#\nusing .NET Framework 4.x. They are exposed to both C# and two implementations\n[2] of Python, namely IronPython [3] and CPython.\nWithin Mechanical, Python scripting enables you to automate repetitive GUI\nactions. This is not unlike other apps developed either by Ansys or other\nsoftware companies. Python scripting leverages the Mechanical API.\nMechanical, like some other apps, is customizable. Using the same API that you\nwould use for scripting, you can implement extensions that add to the\ncapabilities of Mechanical. For example, buttons can be added to the GUI and\ncustom objects can be added to the data model. Even third-party or in-house\nsolvers can be integrated into Mechanical and can take advantage of the\npowerful meshing, generic CAD reader, and the intuitive pre- and post-\nprocessing experience of Mechanical.\nBefore discussing how Mechanical\u2019s API is implemented, let\u2019s first look at the software design\npattern known as the command pattern. You can use this pattern with many programming languages.\nFor a gener",
      "length": 12112
    },
    {
      "file": "version/stable/genindex.html",
      "title": "Index \u2014 PyMechanical",
      "content": "Index \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nPyAnsys\nIndex\nIndex\n_\n| A\n| B\n| C\n| D\n| E\n| F\n| G\n| H\n| I\n| K\n| L\n| M\n| N\n| O\n| P\n| R\n| S\n| T\n| U\n| V\n| W\n_\n__call__() (in module remote_method)\n__call_method__() (in module remote_method)\n__del__() (in module Client)\n(in module LocalMechanicalPool)\n(in module Mechanical)\n__enter__() (in module App)\n(in module Transaction)\n__exit__() (in module App)\n(in module Transaction)\n__get__() (in module remote_method)\n__getattr__() (in module Client)\n(in module GetterWrapper)\n__getitem__() (in module LocalMechanicalPool)\n(in module Logger)\n(in module MessageManager)\n__iter__() (in module LocalMechanicalPool)\n__len__() (in module LocalMechanicalPool)\n(in module MessageManager)\n__post_init__() (in module Plottable)\n__repr__() (in module App)\n(in module DefaultServiceMethods)\n(in module Mechanical)\n(in module MessageManager)\n__setattr__() (in module GetterWrapper)\n__str__() (in module LocalMechanicalPool)\n(in module MessageManager)\nA\nadd() (in module MessageManager)\nadd_child_logger() (in module Logger)\nadd_handling_uncaught_exceptions() (in module Logger)\nadd_instance_logger() (in module Logger)\nadd_mechanical_python_libraries() (in module app_libraries)\nadd_stdout_handler() (in module logging)\naddfile_handler() (in module logging)\naddin_configuration (in module AddinConfiguration)\nadditional_args (in module MechanicalLauncher)\nadditional_envs (in module MechanicalLauncher)\nansys.mechanical.core\nmodule\nansys.mechanical.core.embedding\nmodule\nansys.mechanical.core.embedding.addins\nmodule\nansys.mechani",
      "length": 20310
    },
    {
      "file": "version/stable/contributing.html",
      "title": "Contribute \u2014 PyMechanical",
      "content": "Contribute \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nPyAnsys\nContribute\nContribute#\nOverall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys Developer\u2019s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyMechanical.\nThe following contribution information is specific to PyMechanical.\nClone the repository and install project dependencies#\nTo clone and install the latest PyMechanical release in development mode, run\nthese commands:\nClone the repository and create a virtual environment:\n# Clone the repository\ngit clone https://github.com/ansys/pymechanical\ncd pymechanical\n# Create a virtual environment\npython -m venv .venv\nActivate the virtual environment:\nWindows\n.venv\\Scripts\\activate.bat\nPowerShell\n.venv\\Scripts\\Activate.ps1\nLinux/UNIX\nsource .venv/bin/activate\nInstall tools and dependencies:\n# Install build system tools\npython -m pip install --upgrade pip tox flit twine\n# Install the project, documentation, and test dependencies in editable mode\npython -m pip install -e .[doc,tests]\nTest PyMechanical#\nPyMechanical uses PyTest and tox for unit testing. Prior to running the tests,\nensure Mechanical is installed on your system with a valid license and the test\ndependencies are installed. Run this command to install the test dependencies:\npip install -e .[tests]\nUsing pytest#\nTo run the tests, navigate to the root directory of the repository and run this command:\npytest\nThe pytest command runs all of the tests in the tests folder. After pytest is\ndone run",
      "length": 7316
    },
    {
      "file": "version/stable/search.html",
      "title": "Search - PyMechanical",
      "content": "Search - PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nPyAnsys\nSearch\nShow results:\n10\n20\n50\n\u00a9 Copyright (c) 2025 ANSYS, Inc. All rights reserved.\nCreated using Sphinx 8.2.3.\nBuilt with the\nAnsys Sphinx Theme\n1.5.2. Last updated on",
      "length": 665
    },
    {
      "file": "version/stable/faq.html",
      "title": "Frequently asked questions \u2014 PyMechanical",
      "content": "Frequently asked questions \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nSection Navigation\nPyAnsys\nFrequently asked questions\nFrequently asked questions#\nThis section provides answers to frequently asked questions.\nHow do you report issues?\nYou can report issues with PyMechanical, such as bugs, feature requests,\nand documentation errors, on the PyMechanical repository\u2019s Issues page.\nIf you want to ask more open-ended questions or are seeking advice\nfrom experts in the community, you can post on this repository\u2019s\nDiscussions page.\nHow is PyMechanical positioned with respect to other related Ansys tools?\nWhen you want to automate or extend Ansys Mechanical, you should\nconsider these tools:\nACT in Mechanical\nScripting in Mechanical\nPyMechanical\nAlthough all of these tools work best in interactive mode, there is increasing support\nfor batch mode. You can use the first two tools from either Ansys Workbench or from\nstandalone Mechanical.\nACT in Mechanical\nIn Mechanical, ACT is a customization framework. When specific features are missing,\nyou can add them using ACT. Of course, some of those missing features might be\nautomations or scripts of existing features. But, in many cases, they can be new\ncapabilities, such as extensions to Mechanical\u2019s data model, the ability to connect\nto callbacks, and even integrations of external solvers.\nScripting in Mechanical\nThe Python scripting capability in Mechanical was born out of the same development\nthat brought ACT to Mechanical. This tool provides the same APIs as those used for\nPyMechanical but can on",
      "length": 5643
    },
    {
      "file": "version/stable/user_guide_session/index.html",
      "title": "Remote session \u2014 PyMechanical",
      "content": "Remote session \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nSection Navigation\nRemote session\nInitial setup for launching a Mechanical session on the local machine\nCreate a pool of Mechanical servers\nPyAnsys\nRemote session\nRemote session#\nThis section  provides an overview of how you use PyMechanical as a client\nto a remote Mechanical session.\nOverview#\nThe launch_mechanical() method\ncreates an instance of the Mechanical\nclass in the background and sends commands to it as a service. Because errors and warnings\nare processed Pythonically, you can develop a script in real time without worrying about\nwhether the script runs correctly when deployed in batch mode.\nHere is how you use the launch_mechanical() method to launch Mechanical from Python in gRPC mode:\nimport os\nfrom ansys.mechanical.core import launch_mechanical\nmechanical = launch_mechanical()\nIf multiple versions of product are installed, then you can use exec_file argument\nto select the version of the product to launch.\nexec_file_path = \"C:/Program Files/ANSYS Inc/v252/aisol/bin/win64/AnsysWBU.exe\"\nmechanical = launch_mechanical(\nexec_file=exec_file_path, batch=False, cleanup_on_exit=False\n)\nIf batch option is set to True Mechanical is launched without GUI. The cleanup_on_exit\noption decides whether product exits at the end of the PyMechanical script or not.\nNote\nversion argument is used only if PyPIM is configured. For general cases, use exec_file\nYou can send genuine Python class commands to the application when Mechanical is active.\nFor example, you can send a Python script:\nre",
      "length": 3151
    },
    {
      "file": "version/stable/user_guide_session/pool.html",
      "title": "Create a pool of Mechanical servers \u2014 PyMechanical",
      "content": "Create a pool of Mechanical servers \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nSection Navigation\nRemote session\nInitial setup for launching a Mechanical session on the local machine\nCreate a pool of Mechanical servers\nPyAnsys\nRemote session\nCreate a pool of Mechanical servers\nCreate a pool of Mechanical servers#\nThe LocalMechanicalPool\nclass simplifies creating and connecting to multiple servers of the\nMechanical class for batch\nprocessing. You can use this class for batch processing a set of input files or\nother batch-related processes.\nThis code shows how to create a pool with 10 instances:\n>>> from ansys.mechanical.core import LocalMechanicalPool\n>>> pool = LocalMechanicalPool(10, version=\"252\")\n'Mechanical Pool with 10 active instances'\nWhen you are creating a pool, you can supply additional keyword arguments.\nFor example, to restart failed instances, you can set restart_failed=True:\n>>> import os\n>>> my_path = os.getcmd()\n>>> pool = LocalMechanicalPool(10, version=\"252\", restart_failed=True)\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\nYou can access each individual instance of Mechanical with this code:\n>>> pool[0]\n<ansys.mechanical.core.mechanical.Mechanical at 0x7fabf0230d90>\nBecause this is a self-healing pool, if an instance of Mechanical stops\nduring a batch process, this instance is automatically restarted. When creating\nthe pool, you can disable this behavior by setting restart_failed=False.\nRun a set of input files#\nYou can use the pool to run a set of pre-generated input files using the\nrun_batch() metho",
      "length": 3203
    },
    {
      "file": "version/stable/user_guide_session/server-launcher.html",
      "title": "Initial setup for launching a Mechanical session on the local machine \u2014 PyMechanical",
      "content": "Initial setup for launching a Mechanical session on the local machine \u2014 PyMechanical\nSkip to main content\nBack to top\nCtrl+K\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nMore\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nGetting started\nExamples\nRemote session\nEmbedded instance\nMechanical scripting\nAPI reference\nContribute\nKnown issues and limitations\nFrequently asked questions\nRelease notes\nCtrl+K\nChoose version\nGitHub\nSupport\nSection Navigation\nRemote session\nInitial setup for launching a Mechanical session on the local machine\nCreate a pool of Mechanical servers\nPyAnsys\nRemote session\nInitial setup for launching a Mechanical session on the local machine\nInitial setup for launching a Mechanical session on the local machine#\nTo run, PyMechanical must know the location of your Mechanical installation.\nMost of the time, PyMechanical can determine this location automatically. However,\nif you have a non-standard installation, you must provide this location.\nTo test and set up your installation of PyMechanical, run the\nlaunch_mechanical()\nmethod:\nfrom ansys.mechanical.core import launch_mechanical\nmechanical = launch_mechanical()\nThe first time that you run this method, PyMechanical attempts to detect the location\nof your Mechanical installation based on environment variables. If it cannot find\na Mechanical installation, PyMechanical asks you to supply the location of the\nMechanical executable file.\nOn Linux\nEnter location of Mechanical executable: /usr/ansys_inc/v252/aisol/.workbench\nOn Windows\nEnter location of Mechanical executable: C:/Program Files/ANSYS Inc/v252/aisol/bin/winx64/AnsysWBU.exe\nThe settings file for Mechanical is stored locally. You do not need to enter\nthe path again. If you must change the path, perhaps to change the default\nversion of Mechanical, run the following:\nfrom ansys.mechanical import core as pymechanical\nnew_path = \"C:/P",
      "length": 3277
    }
  ]
}